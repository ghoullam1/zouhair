<?php

namespace AppBundle\Repository;

/**
 * CommandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommandeRepository extends \Doctrine\ORM\EntityRepository {

    function liste(array $criteres, $sort, $dir, $start = 0, $max = 10) {

        $qbMaxDateStatut = $this->_em->createQueryBuilder()
                ->select("MAX(ch.dateStatut)")
                ->from("AppBundle:CommandeHistorique", "ch")
                ->where("ch.commande = c.id")
        ;
        $qb = $this->_em->createQueryBuilder();
        $qb
                ->from($this->_entityName, "c")
                ->join('c.client', "clt")
                ->leftJoin('c.modeLivraison', "ml")
                ->leftJoin('c.coupon', "cp")
        ;

        $total = $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();

        $operateur = "where";
        if (isset($criteres["reference"])) {
            $qb->$operateur("c.reference LIKE :reference")
                    ->setParameter("reference", "%" . $criteres["reference"] . "%")
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["client"])) {
            $qb->$operateur("CONCAT(clt.nom,CONCAT(' ',clt.prenom)) LIKE :client")
                    ->setParameter("client", "%" . $criteres["client"] . "%")
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["total"])) {
            $qb->$operateur("c.total = :total")
                    ->setParameter("total", $criteres["total"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["fraisLivraison"])) {
            $qb->$operateur("ml.fraisLivraison = :fraisLivraison")
                    ->setParameter("fraisLivraison", $criteres["fraisLivraison"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["remise"])) {
            $qb->$operateur("c.remise = :remise")
                    ->setParameter("occasion", $criteres["remise"])
            ;
            $operateur = "andWhere";
        }
        if (isset($criteres["dateCommande"])) {
            $date = date_create_from_format('d/m/Y', $criteres["dateCommande"]);
            $date_start = clone $date;
            $date_start->setTime(0, 0, 0);
            $date_end = clone $date;
            $date_end->setTime(23, 59, 59);
            $qb->$operateur("c.dateCommande >= :dateStart")
                    ->setParameter("dateStart", $date_start)
            ;
            $operateur = "andWhere";
            $qb->$operateur("c.dateCommande <= :dateEnd")
                    ->setParameter("dateEnd", $date_end)
            ;
        }
        if (isset($criteres["modesLivraisonIds"])) {
            $qb
                    ->$operateur("ml.id IN (:modesLivraisonIds)")
                    ->setParameter("modesLivraisonIds", $criteres["modesLivraisonIds"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["statutCommandeIds"])) {
            $qb
                    ->join("c.historiques", "h")
                    ->$operateur("h.dateStatut = (" . $qbMaxDateStatut->getDQL() . ")")
            ;
            $operateur = "andWhere";

            $qb->join("h.statut", "s")
                    ->$operateur("s.id IN (:statutCommandeIds)")
                    ->setParameter("statutCommandeIds", $criteres["statutCommandeIds"])
            ;
        }

        $totalFiltred = $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();

        $commandes = $qb
                        ->select("DISTINCT c")
                        ->setFirstResult($start)
                        ->setMaxResults($max)
                        ->orderBy($sort, $dir)
                        ->getQuery()->getResult()
        ;
        return array("total" => $total, "totalFiltred" => $totalFiltred, "commandes" => $commandes);
    }

    function countMe() {
        return $this->_em->createQueryBuilder()
                        ->select("COUNT(c)")
                        ->from($this->_entityName, "c")
                        ->getQuery()->getSingleScalarResult()
        ;
    }

}
