<?php

namespace AppBundle\Repository;

/**
 * CouponRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CouponRepository extends \Doctrine\ORM\EntityRepository {

    function liste(array $criteres, $sort, $dir, $start = 0, $max = 10) {

        $qb = $this->_em->createQueryBuilder();
        $qb->from($this->_entityName, "c");

        $total = $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();

        $operateur = "where";
        if (isset($criteres["code"])) {
            $qb->$operateur("c.code LIKE :code")
                    ->setParameter("code", "%" . $criteres["code"] . "%")
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["libelle"])) {
            $qb->$operateur("c.libelle LIKE :libelle")
                    ->setParameter("libelle", "%" . $criteres["libelle"] . "%")
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["valeur"])) {
            $qb->$operateur("c.valeur = :valeur")
                    ->setParameter("valeur", $criteres["valeur"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["actif"])) {
            $qb->$operateur("c.actif = :actif")
                    ->setParameter("actif", $criteres["actif"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["freeShipping"])) {
            $qb->$operateur("c.freeShipping = :freeShipping")
                    ->setParameter("freeShipping", $criteres["freeShipping"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["typeReduction"])) {
            $qb->$operateur("c.pourcentage = :typeReduction")
                    ->setParameter("typeReduction", $criteres["typeReduction"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["dateDebut"])) {
            $date = date_create_from_format('d/m/Y', $criteres["dateDebut"]);
            $date_start = clone $date;
            $date_start->setTime(0, 0, 0);
            $date_end = clone $date;
            $date_end->setTime(23, 59, 59);
            $qb->$operateur("c.dateDebut >= :dateStart")
                    ->setParameter("dateStart", $date_start)
            ;
            $operateur = "andWhere";
            $qb->$operateur("c.dateDebut <= :dateEnd")
                    ->setParameter("dateEnd", $date_end)
            ;
        }
        if (isset($criteres["dateFin"])) {
            $date = date_create_from_format('d/m/Y', $criteres["dateFin"]);
            $date_start = clone $date;
            $date_start->setTime(0, 0, 0);
            $date_end = clone $date;
            $date_end->setTime(23, 59, 59);
            $qb->$operateur("c.dateFin >= :dateStart")
                    ->setParameter("dateStart", $date_start)
            ;
            $operateur = "andWhere";
            $qb->$operateur("c.dateFin <= :dateEnd")
                    ->setParameter("dateEnd", $date_end)
            ;
        }

        if (isset($criteres["montantMin"])) {
            $qb->$operateur("c.montantMin = :montantMin")
                    ->setParameter("montantMin", $criteres["montantMin"])
            ;
            $operateur = "andWhere";
        }

        if (isset($criteres["montantMax"])) {
            $qb->$operateur("c.montantMax = :montantMax")
                    ->setParameter("montantMax", $criteres["montantMax"])
            ;
            $operateur = "andWhere";
        }

        $totalFiltred = $qb->select("COUNT(c)")->getQuery()->getSingleScalarResult();

        $coupons = $qb
                        ->select("DISTINCT c")
                        ->setFirstResult($start)
                        ->setMaxResults($max)
                        ->orderBy($sort, $dir)
                        ->getQuery()->getResult()
        ;
        return array("total" => $total, "totalFiltred" => $totalFiltred, "coupons" => $coupons);
    }

}
